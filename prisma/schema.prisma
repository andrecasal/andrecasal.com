datasource db {
   provider = "sqlite"
   url      = env("DATABASE_URL")
}

generator client {
   provider = "prisma-client-js"
}

generator erd {
   provider = "prisma-erd-generator"
   disabled = true
}

model File {
   id   String @id @unique @default(cuid())
   blob Bytes

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   image     Image?
}

model Image {
   file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   fileId String @unique

   contentType String
   altText     String?

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   user User?
}

model Role {
   id   String @id @unique @default(cuid())
   name String @unique

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   users       User[]
   permissions Permission[]
}

model Permission {
   id   String @id @unique @default(cuid())
   name String @unique

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   roles Role[]
}

model User {
   id       String  @id @unique @default(cuid())
   email    String  @unique
   username String  @unique
   name     String?

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   image   Image?  @relation(fields: [imageId], references: [fileId])
   imageId String? @unique

   password Password?
   roles    Role[]
   session  Session[]
}

model Password {
   hash String

   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   userId String @unique
}

model Verification {
   id        String   @id @default(cuid())
   createdAt DateTime @default(now())

   /// The type of verification, e.g. "email" or "phone"
   type String

   /// The thing we're trying to verify, e.g. a user's email or phone number
   target String

   /// The secret key used to generate the otp
   secret String

   /// The algorithm used to generate the otp
   algorithm String

   /// The number of digits in the otp
   digits Int

   /// The number of seconds the otp is valid for
   period Int

   /// When it's safe to delete this verification
   expiresAt DateTime?

   @@unique([target, type])
}

model Session {
   id             String   @id @default(cuid())
   createdAt      DateTime @default(now())
   user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
   userId         String
   expirationDate DateTime
}

model EmailSchedule {
   id          String   @id @default(cuid())
   createdAt   DateTime @default(now())
   to          String
   sequence    Int
   scheduledAt DateTime
   sent        Boolean  @default(false)

	@@unique([to, sequence])
}
